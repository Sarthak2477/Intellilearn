export default [
  {
    "role": "system",
    "content": "\nTitle: You are a PostgreSQL database expert specializing in designing schemas based on user requirements.\nInstructions:\nInput: You will receive a text description containing instructions to create a database schema for PostgreSQL.\nTask: Generate the database schema as executable PostgreSQL SQL statements.\nRequirements:\nProvide CREATE TABLE statements for all necessary tables.\nDefine all columns with appropriate data types and constraints (PRIMARY KEY, FOREIGN KEY, NOT NULL, UNIQUE, etc.).\nEnsure that the schema adheres to the third normal form (3NF).\nUse lowercase and snake_case for all table and column names.\nInclude SQL comments (-- comment) in new line to explain the purpose of each table and any important columns or constraints. The comments should be in a new line. \n\nAdd indexes on columns that are frequently searched or used in JOIN operations.\nMake reasonable assumptions if details are missing, and note these assumptions in SQL comments.\nConstraints:\nEnsure the SQL code is syntactically correct and follows PostgreSQL standards and best practices.\nDo not include any explanations or text outside of the SQL code and necessary new line comments.\n\nDemo:\n```sql\n-- 1. Coffee Types Table\nCREATE TABLE coffee_types (\n    coffee_type_id SERIAL PRIMARY KEY, \n    -- Unique identifier for each coffee type\n    name VARCHAR(100) NOT NULL, \n    -- Name of the coffee type\n    description TEXT, \n    -- Description of the coffee type\n    price NUMERIC(5,2) NOT NULL \n    -- Price of the coffee type\n);\n\n-- 2. Employees Table\nCREATE TABLE employees (\n    employee_id SERIAL PRIMARY KEY, \n    -- Unique identifier for each employee\n    first_name VARCHAR(100) NOT NULL, \n    -- Employee's first name\n    last_name VARCHAR(100) NOT NULL, \n    -- Employee's last name\n    email VARCHAR(255) NOT NULL UNIQUE, \n    -- Employee's email (must be unique)\n    hire_date DATE NOT NULL \n    -- Date the employee was hired\n);\n\n-- 3. Orders Table\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY, \n    -- Unique identifier for each order\n    employee_id INT, \n    -- Employee who took the order\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \n    -- Date and time of the order\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) \n    -- Foreign key constraint\n);\n\n-- 4. Order Items Table (Many-to-many relationship between Orders and Coffee Types)\nCREATE TABLE order_items (\n    order_item_id SERIAL PRIMARY KEY, \n    -- Unique identifier for each order item\n    order_id INT, \n    -- Related order\n    coffee_type_id INT, \n    -- Related coffee type\n    quantity INT NOT NULL DEFAULT 1, \n    -- Quantity of the coffee type ordered\n    FOREIGN KEY (order_id) REFERENCES orders(order_id), \n    -- Foreign key constraint\n    FOREIGN KEY (coffee_type_id) REFERENCES coffee_types(coffee_type_id) \n    -- Foreign key constraint\n);\n```\n",
  },
  {
    "role": "user",
    "content": "create me a database schema for a library with shelves books and orders ",
  },
  {
    "role": "assistant",
    "content": "-- 1. Users Table\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY, -- Unique identifier for each user\n    username VARCHAR(50) NOT NULL UNIQUE, -- Unique username for the user\n    email VARCHAR(255) NOT NULL UNIQUE, -- User's email (must be unique)\n    password_hash VARCHAR(255) NOT NULL, -- Hashed password for authentication\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp for user creation\n);\n\n-- 2. Flashcards Table\nCREATE TABLE flashcards (\n    flashcard_id SERIAL PRIMARY KEY, -- Unique identifier for each flashcard\n    user_id INT NOT NULL, -- User who created the flashcard\n    question TEXT NOT NULL, -- The question of the flashcard\n    answer TEXT NOT NULL, -- The answer to the flashcard\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for flashcard creation\n    FOREIGN KEY (user_id) REFERENCES users(user_id) -- Foreign key constraint\n);\n\n-- 3. Quizzes Table\nCREATE TABLE quizzes (\n    quiz_id SERIAL PRIMARY KEY, -- Unique identifier for each quiz\n    user_id INT NOT NULL, -- User who created the quiz\n    title VARCHAR(100) NOT NULL, -- Title of the quiz\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for quiz creation\n    FOREIGN KEY (user_id) REFERENCES users(user_id) -- Foreign key constraint\n);\n\n-- 4. Quiz Questions Table\nCREATE TABLE quiz_questions (\n    quiz_question_id SERIAL PRIMARY KEY, -- Unique identifier for each quiz question\n    quiz_id INT NOT NULL, -- Related quiz\n    question TEXT NOT NULL, -- The question for the quiz\n    correct_answer TEXT NOT NULL, -- The correct answer for the quiz question\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for question creation\n    FOREIGN KEY (quiz_id) REFERENCES quizzes(quiz_id) -- Foreign key constraint\n);\n\n-- 5. Study Plans Table\nCREATE TABLE study_plans (\n    study_plan_id SERIAL PRIMARY KEY, -- Unique identifier for each study plan\n    user_id INT NOT NULL, -- User who created the study plan\n    title VARCHAR(100) NOT NULL, -- Title of the study plan\n    description TEXT, -- Description of the study plan\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for study plan creation\n    FOREIGN KEY (user_id) REFERENCES users(user_id) -- Foreign key constraint\n);\n\n-- 6. Study Plan Flashcards Table (Many-to-many relationship between Study Plans and Flashcards)\nCREATE TABLE study_plan_flashcards (\n    study_plan_flashcard_id SERIAL PRIMARY KEY, -- Unique identifier for each study plan flashcard link\n    study_plan_id INT NOT NULL, -- Related study plan\n    flashcard_id INT NOT NULL, -- Related flashcard\n    FOREIGN KEY (study_plan_id) REFERENCES study_plans(study_plan_id), -- Foreign key constraint\n    FOREIGN KEY (flashcard_id) REFERENCES flashcards(flashcard_id) -- Foreign key constraint\n);\n\n-- Indexes for frequently searched columns\nCREATE INDEX idx_user_email ON users(email); -- Index for searching users by email\nCREATE INDEX idx_flashcard_question ON flashcards(question); -- Index for searching flashcards by question\nCREATE INDEX idx_quiz_title ON quizzes(title); -- Index for searching quizzes by title\nCREATE INDEX idx_study_plan_title ON study_plans(title); -- Index for searching study plans by title",
  },
  {
    "role": "user",
    "content": "create me a database schema for a library with shelves books and orders \n",
  },
  {
    "role": "assistant",
    "content": "-- 1. Shelves Table\nCREATE TABLE shelves (\n    shelf_id SERIAL PRIMARY KEY, -- Unique identifier for each shelf\n    name VARCHAR(100) NOT NULL, -- Name of the shelf\n    location VARCHAR(255), -- Location description of the shelf\n    capacity INT NOT NULL -- Maximum number of books that can be stored on the shelf\n);\n\n-- 2. Books Table\nCREATE TABLE books (\n    book_id SERIAL PRIMARY KEY, -- Unique identifier for each book\n    title VARCHAR(255) NOT NULL, -- Title of the book\n    author VARCHAR(100) NOT NULL, -- Author of the book\n    isbn VARCHAR(20) UNIQUE NOT NULL, -- ISBN number of the book (must be unique)\n    published_date DATE, -- Publication date of the book\n    shelf_id INT, -- Related shelf where the book is located\n    FOREIGN KEY (shelf_id) REFERENCES shelves(shelf_id) -- Foreign key constraint\n);\n\n-- 3. Members Table\nCREATE TABLE members (\n    member_id SERIAL PRIMARY KEY, -- Unique identifier for each library member\n    first_name VARCHAR(100) NOT NULL, -- Member's first name\n    last_name VARCHAR(100) NOT NULL, -- Member's last name\n    email VARCHAR(255) NOT NULL UNIQUE, -- Member's email (must be unique)\n    join_date DATE NOT NULL -- Date the member joined the library\n);\n\n-- 4. Orders Table\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY, -- Unique identifier for each order\n    member_id INT, -- Member who placed the order\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date and time of the order\n    status VARCHAR(50) NOT NULL, -- Status of the order (e.g., pending, completed)\n    FOREIGN KEY (member_id) REFERENCES members(member_id) -- Foreign key constraint\n);\n\n-- 5. Order Items Table (Many-to-many relationship between Orders and Books)\nCREATE TABLE order_items (\n    order_item_id SERIAL PRIMARY KEY, -- Unique identifier for each order item\n    order_id INT, -- Related order\n    book_id INT, -- Related book\n    quantity INT NOT NULL DEFAULT 1, -- Quantity of the book ordered\n    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE, -- Foreign key constraint\n    FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE -- Foreign key constraint\n);\n\n-- Indexes for frequently searched columns\nCREATE INDEX idx_book_title ON books(title); -- Index for searching books by title\nCREATE INDEX idx_member_email ON members(email); -- Index for searching members by email\nCREATE INDEX idx_order_status ON orders(status); -- Index for searching orders by status",
  }
]